{
  "/Users/robertuj/norimx/creze/creze-api": {
    "versionSfCore": null,
    "versionFramework": "4.2.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "self": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "robertuj",
            "app": "creze-docs",
            "service": "creze-docs-api",
            "provider": {
              "name": "aws",
              "runtime": "python3.12",
              "stage": "dev",
              "region": "us-east-2",
              "environment": {
                "BUCKET_NAME": "creze-docs-api-dev-bucket",
                "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
              },
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": "arn:aws:s3:::creze-docs-api-dev-bucket/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": "arn:aws:s3:::creze-docs-api-dev-bucket"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:us-east-2:*:log-group:/aws/lambda/*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-reassembleFile"
                }
              ],
              "apiGateway": {
                "binaryMediaTypes": [
                  "application/octet-stream",
                  "multipart/form-data"
                ]
              },
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "HelloLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/creze-docs-api-dev-hello"
                    }
                  },
                  "UploadFragmentLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/creze-docs-api-dev-uploadFragment"
                    }
                  },
                  "ReassembleFileLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/creze-docs-api-dev-reassembleFile"
                    }
                  },
                  "ListDocumentsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/creze-docs-api-dev-listDocuments"
                    }
                  },
                  "SignInLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/creze-docs-api-dev-signIn"
                    }
                  },
                  "SignUpLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/creze-docs-api-dev-signUp"
                    }
                  },
                  "ConfirmSignUpLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/creze-docs-api-dev-confirmSignUp"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "creze-docs-api",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/creze-docs-api-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/creze-docs-api-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject",
                                  "s3:GetObject",
                                  "s3:DeleteObject"
                                ],
                                "Resource": "arn:aws:s3:::creze-docs-api-dev-bucket/*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:ListBucket"
                                ],
                                "Resource": "arn:aws:s3:::creze-docs-api-dev-bucket"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogGroup",
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents"
                                ],
                                "Resource": "arn:aws:logs:us-east-2:*:log-group:/aws/lambda/*:*:*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "lambda:InvokeFunction"
                                ],
                                "Resource": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-reassembleFile"
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "creze-docs-api",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "HelloLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                      },
                      "Handler": "src/infrastructure/api/hello.lambda_handler",
                      "Runtime": "python3.12",
                      "FunctionName": "creze-docs-api-dev-hello",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "BUCKET_NAME": "creze-docs-api-dev-bucket",
                          "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                          "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "HelloLogGroup"
                    ]
                  },
                  "UploadFragmentLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                      },
                      "Handler": "src/infrastructure/api/upload_fragment.lambda_handler",
                      "Runtime": "python3.12",
                      "FunctionName": "creze-docs-api-dev-uploadFragment",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "BUCKET_NAME": "creze-docs-api-dev-bucket",
                          "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                          "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UploadFragmentLogGroup"
                    ]
                  },
                  "ReassembleFileLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                      },
                      "Handler": "src/infrastructure/api/reassemble_file.lambda_handler",
                      "Runtime": "python3.12",
                      "FunctionName": "creze-docs-api-dev-reassembleFile",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "BUCKET_NAME": "creze-docs-api-dev-bucket",
                          "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                          "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ReassembleFileLogGroup"
                    ]
                  },
                  "ListDocumentsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                      },
                      "Handler": "src/infrastructure/api/list_files.lambda_handler",
                      "Runtime": "python3.12",
                      "FunctionName": "creze-docs-api-dev-listDocuments",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "BUCKET_NAME": "creze-docs-api-dev-bucket",
                          "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                          "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ListDocumentsLogGroup"
                    ]
                  },
                  "SignInLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                      },
                      "Handler": "src/infrastructure/api/sign_in.lambda_handler",
                      "Runtime": "python3.12",
                      "FunctionName": "creze-docs-api-dev-signIn",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "BUCKET_NAME": "creze-docs-api-dev-bucket",
                          "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                          "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SignInLogGroup"
                    ]
                  },
                  "SignUpLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                      },
                      "Handler": "src/infrastructure/api/sign_up.lambda_handler",
                      "Runtime": "python3.12",
                      "FunctionName": "creze-docs-api-dev-signUp",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "BUCKET_NAME": "creze-docs-api-dev-bucket",
                          "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                          "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SignUpLogGroup"
                    ]
                  },
                  "ConfirmSignUpLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                      },
                      "Handler": "src/infrastructure/api/confirm_sign_up.lambda_handler",
                      "Runtime": "python3.12",
                      "FunctionName": "creze-docs-api-dev-confirmSignUp",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "BUCKET_NAME": "creze-docs-api-dev-bucket",
                          "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                          "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ConfirmSignUpLogGroup"
                    ]
                  },
                  "HelloLambdaVersioniie3uIV6f1m9eZKlKDPsQ6fxSQbf0AYhujUws90Gfv0": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "HelloLambdaFunction"
                      },
                      "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
                    }
                  },
                  "UploadFragmentLambdaVersionNABKOM6e0oSdRMOk4gkD7tqYzKPok4SXGyF8lx4tEc": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UploadFragmentLambdaFunction"
                      },
                      "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
                    }
                  },
                  "ReassembleFileLambdaVersionRNzTDLQgoaJh895GZXBhFaICGWUmulHYJrg86lszLQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ReassembleFileLambdaFunction"
                      },
                      "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
                    }
                  },
                  "ListDocumentsLambdaVersionjRb4FxGGq9rJ2UbYiV00mjKd64rJzYcefJjQXoa4": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ListDocumentsLambdaFunction"
                      },
                      "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
                    }
                  },
                  "SignInLambdaVersionnbCje03q8veuLqFITY1FcaD1M5zhaIfLF4p26MySlE4": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SignInLambdaFunction"
                      },
                      "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
                    }
                  },
                  "SignUpLambdaVersion84r87vDyhZG6c7AEplD3A53V5Vf38SMvwCmjpnOkp4": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SignUpLambdaFunction"
                      },
                      "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
                    }
                  },
                  "ConfirmSignUpLambdaVersiono67BqsmRXjWOER9zAbLpkwRYPg1S8HqSA4tiKROCk": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ConfirmSignUpLambdaFunction"
                      },
                      "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-creze-docs-api",
                      "BinaryMediaTypes": [
                        "application/octet-stream",
                        "multipart/form-data"
                      ],
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceHello": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "hello",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUploadfragment": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "upload_fragment",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceReassemblefile": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "reassemble_file",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceListfiles": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "list_files",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceLogin": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "login",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceRegister": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "register",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceConfirmregister": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "confirm_register",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodUploadfragmentOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUploadfragment"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodReassemblefileOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceReassemblefile"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodListfilesOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListfiles"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodLoginOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceLogin"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodRegisterOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceRegister"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodConfirmregisterOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceConfirmregister"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodHelloGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceHello"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "HelloLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "HelloLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUploadfragmentPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUploadfragment"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "COGNITO_USER_POOLS",
                      "AuthorizerId": {
                        "Ref": "ApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UploadFragmentLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UploadFragmentLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodReassemblefilePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceReassemblefile"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "COGNITO_USER_POOLS",
                      "AuthorizerId": {
                        "Ref": "ApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ReassembleFileLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ReassembleFileLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodListfilesGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceListfiles"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "COGNITO_USER_POOLS",
                      "AuthorizerId": {
                        "Ref": "ApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ListDocumentsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ListDocumentsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodLoginPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceLogin"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SignInLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "SignInLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodRegisterPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceRegister"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SignUpLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "SignUpLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodConfirmregisterPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceConfirmregister"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ConfirmSignUpLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ConfirmSignUpLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1724941743365": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodUploadfragmentOptions",
                      "ApiGatewayMethodReassemblefileOptions",
                      "ApiGatewayMethodListfilesOptions",
                      "ApiGatewayMethodLoginOptions",
                      "ApiGatewayMethodRegisterOptions",
                      "ApiGatewayMethodConfirmregisterOptions",
                      "ApiGatewayMethodHelloGet",
                      "ApiGatewayMethodUploadfragmentPost",
                      "ApiGatewayMethodReassemblefilePost",
                      "ApiGatewayMethodListfilesGet",
                      "ApiGatewayMethodLoginPost",
                      "ApiGatewayMethodRegisterPost",
                      "ApiGatewayMethodConfirmregisterPost"
                    ]
                  },
                  "HelloLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "HelloLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UploadFragmentLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UploadFragmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ReassembleFileLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ReassembleFileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ListDocumentsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ListDocumentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "SignInLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SignInLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "SignUpLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SignUpLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ConfirmSignUpLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ConfirmSignUpLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DocumentsBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketName": "creze-docs-api-dev-bucket",
                      "AccessControl": "Private",
                      "CorsConfiguration": {
                        "CorsRules": [
                          {
                            "AllowedOrigins": [
                              "*"
                            ],
                            "AllowedHeaders": [
                              "*"
                            ],
                            "AllowedMethods": [
                              "GET",
                              "PUT",
                              "POST",
                              "DELETE"
                            ],
                            "MaxAge": 3000
                          }
                        ]
                      }
                    }
                  },
                  "LambdaLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/creze-docs-api-dev",
                      "RetentionInDays": 14
                    }
                  },
                  "ErrorAlarm": {
                    "Type": "AWS::CloudWatch::Alarm",
                    "Properties": {
                      "AlarmDescription": "Alarm if function errors",
                      "Namespace": "AWS/Lambda",
                      "MetricName": "Errors",
                      "Dimensions": [
                        {
                          "Name": "FunctionName",
                          "Value": {
                            "Ref": "AWS::StackName"
                          }
                        }
                      ],
                      "Statistic": "Sum",
                      "Period": 300,
                      "EvaluationPeriods": 1,
                      "Threshold": 1,
                      "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                      "AlarmActions": [
                        "arn:aws:sns:us-east-2:764961882162:my-sns-topic"
                      ],
                      "TreatMissingData": "notBreaching"
                    }
                  },
                  "ApiGatewayAuthorizer": {
                    "Type": "AWS::ApiGateway::Authorizer",
                    "Properties": {
                      "Name": "CognitoUserPoolAuthorizer",
                      "Type": "COGNITO_USER_POOLS",
                      "IdentitySource": "method.request.header.Authorization",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ProviderARNs": [
                        "arn:aws:cognito-idp:us-east-2:764961882162:userpool/us-east-2_Dk6dCg56D"
                      ]
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "Export": {
                      "Name": "sls-creze-docs-api-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "HelloLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "HelloLambdaVersioniie3uIV6f1m9eZKlKDPsQ6fxSQbf0AYhujUws90Gfv0"
                    },
                    "Export": {
                      "Name": "sls-creze-docs-api-dev-HelloLambdaFunctionQualifiedArn"
                    }
                  },
                  "UploadFragmentLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UploadFragmentLambdaVersionNABKOM6e0oSdRMOk4gkD7tqYzKPok4SXGyF8lx4tEc"
                    },
                    "Export": {
                      "Name": "sls-creze-docs-api-dev-UploadFragmentLambdaFunctionQualifiedArn"
                    }
                  },
                  "ReassembleFileLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ReassembleFileLambdaVersionRNzTDLQgoaJh895GZXBhFaICGWUmulHYJrg86lszLQ"
                    },
                    "Export": {
                      "Name": "sls-creze-docs-api-dev-ReassembleFileLambdaFunctionQualifiedArn"
                    }
                  },
                  "ListDocumentsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ListDocumentsLambdaVersionjRb4FxGGq9rJ2UbYiV00mjKd64rJzYcefJjQXoa4"
                    },
                    "Export": {
                      "Name": "sls-creze-docs-api-dev-ListDocumentsLambdaFunctionQualifiedArn"
                    }
                  },
                  "SignInLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SignInLambdaVersionnbCje03q8veuLqFITY1FcaD1M5zhaIfLF4p26MySlE4"
                    },
                    "Export": {
                      "Name": "sls-creze-docs-api-dev-SignInLambdaFunctionQualifiedArn"
                    }
                  },
                  "SignUpLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SignUpLambdaVersion84r87vDyhZG6c7AEplD3A53V5Vf38SMvwCmjpnOkp4"
                    },
                    "Export": {
                      "Name": "sls-creze-docs-api-dev-SignUpLambdaFunctionQualifiedArn"
                    }
                  },
                  "ConfirmSignUpLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ConfirmSignUpLambdaVersiono67BqsmRXjWOER9zAbLpkwRYPg1S8HqSA4tiKROCk"
                    },
                    "Export": {
                      "Name": "sls-creze-docs-api-dev-ConfirmSignUpLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-creze-docs-api-dev-ServiceEndpoint"
                    }
                  },
                  "BucketName": {
                    "Description": "Name of the S3 bucket to hold file uploads",
                    "Value": "creze-docs-api-dev-bucket"
                  }
                }
              },
              "coreCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "resources": {
              "Resources": {
                "DocumentsBucket": {
                  "Type": "AWS::S3::Bucket",
                  "Properties": {
                    "BucketName": "creze-docs-api-dev-bucket",
                    "AccessControl": "Private",
                    "CorsConfiguration": {
                      "CorsRules": [
                        {
                          "AllowedOrigins": [
                            "*"
                          ],
                          "AllowedHeaders": [
                            "*"
                          ],
                          "AllowedMethods": [
                            "GET",
                            "PUT",
                            "POST",
                            "DELETE"
                          ],
                          "MaxAge": 3000
                        }
                      ]
                    }
                  }
                },
                "LambdaLogGroup": {
                  "Type": "AWS::Logs::LogGroup",
                  "Properties": {
                    "LogGroupName": "/aws/lambda/creze-docs-api-dev",
                    "RetentionInDays": 14
                  }
                },
                "ErrorAlarm": {
                  "Type": "AWS::CloudWatch::Alarm",
                  "Properties": {
                    "AlarmDescription": "Alarm if function errors",
                    "Namespace": "AWS/Lambda",
                    "MetricName": "Errors",
                    "Dimensions": [
                      {
                        "Name": "FunctionName",
                        "Value": {
                          "Ref": "AWS::StackName"
                        }
                      }
                    ],
                    "Statistic": "Sum",
                    "Period": 300,
                    "EvaluationPeriods": 1,
                    "Threshold": 1,
                    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                    "AlarmActions": [
                      "arn:aws:sns:us-east-2:764961882162:my-sns-topic"
                    ],
                    "TreatMissingData": "notBreaching"
                  }
                },
                "ApiGatewayAuthorizer": {
                  "Type": "AWS::ApiGateway::Authorizer",
                  "Properties": {
                    "Name": "CognitoUserPoolAuthorizer",
                    "Type": "COGNITO_USER_POOLS",
                    "IdentitySource": "method.request.header.Authorization",
                    "RestApiId": {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "ProviderARNs": [
                      "arn:aws:cognito-idp:us-east-2:764961882162:userpool/us-east-2_Dk6dCg56D"
                    ]
                  }
                }
              },
              "Outputs": {
                "BucketName": {
                  "Description": "Name of the S3 bucket to hold file uploads",
                  "Value": "creze-docs-api-dev-bucket"
                }
              }
            },
            "functions": {
              "hello": {
                "handler": "src/infrastructure/api/hello.lambda_handler",
                "events": [
                  {
                    "http": {
                      "path": "hello",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "creze-docs-api-dev-hello",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.12",
                "vpc": {},
                "versionLogicalId": "HelloLambdaVersioniie3uIV6f1m9eZKlKDPsQ6fxSQbf0AYhujUws90Gfv0"
              },
              "uploadFragment": {
                "handler": "src/infrastructure/api/upload_fragment.lambda_handler",
                "events": [
                  {
                    "http": {
                      "path": "upload_fragment",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "COGNITO_USER_POOLS",
                        "managedExternally": false,
                        "authorizerId": {
                          "Ref": "ApiGatewayAuthorizer"
                        },
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "creze-docs-api-dev-uploadFragment",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.12",
                "vpc": {},
                "versionLogicalId": "UploadFragmentLambdaVersionNABKOM6e0oSdRMOk4gkD7tqYzKPok4SXGyF8lx4tEc"
              },
              "reassembleFile": {
                "handler": "src/infrastructure/api/reassemble_file.lambda_handler",
                "events": [
                  {
                    "http": {
                      "path": "reassemble_file",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "COGNITO_USER_POOLS",
                        "managedExternally": false,
                        "authorizerId": {
                          "Ref": "ApiGatewayAuthorizer"
                        },
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "creze-docs-api-dev-reassembleFile",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.12",
                "vpc": {},
                "versionLogicalId": "ReassembleFileLambdaVersionRNzTDLQgoaJh895GZXBhFaICGWUmulHYJrg86lszLQ"
              },
              "listDocuments": {
                "handler": "src/infrastructure/api/list_files.lambda_handler",
                "events": [
                  {
                    "http": {
                      "path": "list_files",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "COGNITO_USER_POOLS",
                        "managedExternally": false,
                        "authorizerId": {
                          "Ref": "ApiGatewayAuthorizer"
                        },
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "creze-docs-api-dev-listDocuments",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.12",
                "vpc": {},
                "versionLogicalId": "ListDocumentsLambdaVersionjRb4FxGGq9rJ2UbYiV00mjKd64rJzYcefJjQXoa4"
              },
              "signIn": {
                "handler": "src/infrastructure/api/sign_in.lambda_handler",
                "events": [
                  {
                    "http": {
                      "path": "login",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "creze-docs-api-dev-signIn",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.12",
                "vpc": {},
                "versionLogicalId": "SignInLambdaVersionnbCje03q8veuLqFITY1FcaD1M5zhaIfLF4p26MySlE4"
              },
              "signUp": {
                "handler": "src/infrastructure/api/sign_up.lambda_handler",
                "events": [
                  {
                    "http": {
                      "path": "register",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "creze-docs-api-dev-signUp",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.12",
                "vpc": {},
                "versionLogicalId": "SignUpLambdaVersion84r87vDyhZG6c7AEplD3A53V5Vf38SMvwCmjpnOkp4"
              },
              "confirmSignUp": {
                "handler": "src/infrastructure/api/confirm_sign_up.lambda_handler",
                "events": [
                  {
                    "http": {
                      "path": "confirm_register",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "creze-docs-api-dev-confirmSignUp",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.12",
                "vpc": {},
                "versionLogicalId": "ConfirmSignUpLambdaVersiono67BqsmRXjWOER9zAbLpkwRYPg1S8HqSA4tiKROCk"
              }
            },
            "plugins": [
              "serverless-python-requirements"
            ],
            "custom": {
              "pythonRequirements": {
                "dockerizePip": true,
                "slim": true
              }
            }
          },
          "configFileDirPath": "/Users/robertuj/norimx/creze/creze-api",
          "config": {
            "type": "self"
          },
          "options": {
            "verbose": true,
            "force": true
          },
          "stage": "dev",
          "dashboard": null,
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/robertuj/norimx/creze/creze-api",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "robertuj",
      "app": "creze-docs",
      "service": "creze-docs-api",
      "provider": {
        "name": "aws",
        "runtime": "python3.12",
        "stage": "dev",
        "region": "us-east-2",
        "environment": {
          "BUCKET_NAME": "creze-docs-api-dev-bucket",
          "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
          "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject",
              "s3:DeleteObject"
            ],
            "Resource": "arn:aws:s3:::creze-docs-api-dev-bucket/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::creze-docs-api-dev-bucket"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:us-east-2:*:log-group:/aws/lambda/*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-reassembleFile"
          }
        ],
        "apiGateway": {
          "binaryMediaTypes": [
            "application/octet-stream",
            "multipart/form-data"
          ]
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "HelloLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/creze-docs-api-dev-hello"
              }
            },
            "UploadFragmentLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/creze-docs-api-dev-uploadFragment"
              }
            },
            "ReassembleFileLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/creze-docs-api-dev-reassembleFile"
              }
            },
            "ListDocumentsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/creze-docs-api-dev-listDocuments"
              }
            },
            "SignInLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/creze-docs-api-dev-signIn"
              }
            },
            "SignUpLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/creze-docs-api-dev-signUp"
              }
            },
            "ConfirmSignUpLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/creze-docs-api-dev-confirmSignUp"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "creze-docs-api",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/creze-docs-api-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/creze-docs-api-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:DeleteObject"
                          ],
                          "Resource": "arn:aws:s3:::creze-docs-api-dev-bucket/*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:ListBucket"
                          ],
                          "Resource": "arn:aws:s3:::creze-docs-api-dev-bucket"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                          ],
                          "Resource": "arn:aws:logs:us-east-2:*:log-group:/aws/lambda/*:*:*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "lambda:InvokeFunction"
                          ],
                          "Resource": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-reassembleFile"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "creze-docs-api",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "HelloLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                },
                "Handler": "src/infrastructure/api/hello.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "creze-docs-api-dev-hello",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "BUCKET_NAME": "creze-docs-api-dev-bucket",
                    "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                    "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HelloLogGroup"
              ]
            },
            "UploadFragmentLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                },
                "Handler": "src/infrastructure/api/upload_fragment.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "creze-docs-api-dev-uploadFragment",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "BUCKET_NAME": "creze-docs-api-dev-bucket",
                    "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                    "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UploadFragmentLogGroup"
              ]
            },
            "ReassembleFileLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                },
                "Handler": "src/infrastructure/api/reassemble_file.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "creze-docs-api-dev-reassembleFile",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "BUCKET_NAME": "creze-docs-api-dev-bucket",
                    "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                    "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ReassembleFileLogGroup"
              ]
            },
            "ListDocumentsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                },
                "Handler": "src/infrastructure/api/list_files.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "creze-docs-api-dev-listDocuments",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "BUCKET_NAME": "creze-docs-api-dev-bucket",
                    "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                    "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListDocumentsLogGroup"
              ]
            },
            "SignInLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                },
                "Handler": "src/infrastructure/api/sign_in.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "creze-docs-api-dev-signIn",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "BUCKET_NAME": "creze-docs-api-dev-bucket",
                    "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                    "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SignInLogGroup"
              ]
            },
            "SignUpLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                },
                "Handler": "src/infrastructure/api/sign_up.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "creze-docs-api-dev-signUp",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "BUCKET_NAME": "creze-docs-api-dev-bucket",
                    "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                    "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SignUpLogGroup"
              ]
            },
            "ConfirmSignUpLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/creze-docs-api/dev/1724941752783-2024-08-29T14:29:12.783Z/creze-docs-api.zip"
                },
                "Handler": "src/infrastructure/api/confirm_sign_up.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "creze-docs-api-dev-confirmSignUp",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "BUCKET_NAME": "creze-docs-api-dev-bucket",
                    "COGNITO_USER_POOL_ID": "us-east-2_Dk6dCg56D",
                    "COGNITO_CLIENT_ID": "1n01pklns0cd17licmd7fh6rou"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ConfirmSignUpLogGroup"
              ]
            },
            "HelloLambdaVersioniie3uIV6f1m9eZKlKDPsQ6fxSQbf0AYhujUws90Gfv0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HelloLambdaFunction"
                },
                "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
              }
            },
            "UploadFragmentLambdaVersionNABKOM6e0oSdRMOk4gkD7tqYzKPok4SXGyF8lx4tEc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UploadFragmentLambdaFunction"
                },
                "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
              }
            },
            "ReassembleFileLambdaVersionRNzTDLQgoaJh895GZXBhFaICGWUmulHYJrg86lszLQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ReassembleFileLambdaFunction"
                },
                "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
              }
            },
            "ListDocumentsLambdaVersionjRb4FxGGq9rJ2UbYiV00mjKd64rJzYcefJjQXoa4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListDocumentsLambdaFunction"
                },
                "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
              }
            },
            "SignInLambdaVersionnbCje03q8veuLqFITY1FcaD1M5zhaIfLF4p26MySlE4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SignInLambdaFunction"
                },
                "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
              }
            },
            "SignUpLambdaVersion84r87vDyhZG6c7AEplD3A53V5Vf38SMvwCmjpnOkp4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SignUpLambdaFunction"
                },
                "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
              }
            },
            "ConfirmSignUpLambdaVersiono67BqsmRXjWOER9zAbLpkwRYPg1S8HqSA4tiKROCk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ConfirmSignUpLambdaFunction"
                },
                "CodeSha256": "xp4sIx6nSruUSlxiRDMa8phb5XLSWyQrqVChosA5B58="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-creze-docs-api",
                "BinaryMediaTypes": [
                  "application/octet-stream",
                  "multipart/form-data"
                ],
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceHello": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "hello",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUploadfragment": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "upload_fragment",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceReassemblefile": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "reassemble_file",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceListfiles": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "list_files",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLogin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "login",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceRegister": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "register",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceConfirmregister": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "confirm_register",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUploadfragmentOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUploadfragment"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodReassemblefileOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceReassemblefile"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodListfilesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceListfiles"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodLoginOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRegisterOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRegister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodConfirmregisterOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceConfirmregister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodHelloGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHello"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "HelloLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "HelloLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUploadfragmentPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUploadfragment"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UploadFragmentLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UploadFragmentLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodReassemblefilePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceReassemblefile"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ReassembleFileLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ReassembleFileLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodListfilesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceListfiles"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ListDocumentsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ListDocumentsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodLoginPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SignInLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SignInLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodRegisterPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRegister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SignUpLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SignUpLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodConfirmregisterPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceConfirmregister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ConfirmSignUpLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ConfirmSignUpLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1724941743365": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodUploadfragmentOptions",
                "ApiGatewayMethodReassemblefileOptions",
                "ApiGatewayMethodListfilesOptions",
                "ApiGatewayMethodLoginOptions",
                "ApiGatewayMethodRegisterOptions",
                "ApiGatewayMethodConfirmregisterOptions",
                "ApiGatewayMethodHelloGet",
                "ApiGatewayMethodUploadfragmentPost",
                "ApiGatewayMethodReassemblefilePost",
                "ApiGatewayMethodListfilesGet",
                "ApiGatewayMethodLoginPost",
                "ApiGatewayMethodRegisterPost",
                "ApiGatewayMethodConfirmregisterPost"
              ]
            },
            "HelloLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HelloLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UploadFragmentLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UploadFragmentLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ReassembleFileLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ReassembleFileLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ListDocumentsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListDocumentsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SignInLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SignInLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SignUpLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SignUpLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ConfirmSignUpLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ConfirmSignUpLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DocumentsBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketName": "creze-docs-api-dev-bucket",
                "AccessControl": "Private",
                "CorsConfiguration": {
                  "CorsRules": [
                    {
                      "AllowedOrigins": [
                        "*"
                      ],
                      "AllowedHeaders": [
                        "*"
                      ],
                      "AllowedMethods": [
                        "GET",
                        "PUT",
                        "POST",
                        "DELETE"
                      ],
                      "MaxAge": 3000
                    }
                  ]
                }
              }
            },
            "LambdaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/creze-docs-api-dev",
                "RetentionInDays": 14
              }
            },
            "ErrorAlarm": {
              "Type": "AWS::CloudWatch::Alarm",
              "Properties": {
                "AlarmDescription": "Alarm if function errors",
                "Namespace": "AWS/Lambda",
                "MetricName": "Errors",
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "AWS::StackName"
                    }
                  }
                ],
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "AlarmActions": [
                  "arn:aws:sns:us-east-2:764961882162:my-sns-topic"
                ],
                "TreatMissingData": "notBreaching"
              }
            },
            "ApiGatewayAuthorizer": {
              "Type": "AWS::ApiGateway::Authorizer",
              "Properties": {
                "Name": "CognitoUserPoolAuthorizer",
                "Type": "COGNITO_USER_POOLS",
                "IdentitySource": "method.request.header.Authorization",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ProviderARNs": [
                  "arn:aws:cognito-idp:us-east-2:764961882162:userpool/us-east-2_Dk6dCg56D"
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-creze-docs-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "HelloLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HelloLambdaVersioniie3uIV6f1m9eZKlKDPsQ6fxSQbf0AYhujUws90Gfv0"
              },
              "Export": {
                "Name": "sls-creze-docs-api-dev-HelloLambdaFunctionQualifiedArn"
              }
            },
            "UploadFragmentLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UploadFragmentLambdaVersionNABKOM6e0oSdRMOk4gkD7tqYzKPok4SXGyF8lx4tEc"
              },
              "Export": {
                "Name": "sls-creze-docs-api-dev-UploadFragmentLambdaFunctionQualifiedArn"
              }
            },
            "ReassembleFileLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ReassembleFileLambdaVersionRNzTDLQgoaJh895GZXBhFaICGWUmulHYJrg86lszLQ"
              },
              "Export": {
                "Name": "sls-creze-docs-api-dev-ReassembleFileLambdaFunctionQualifiedArn"
              }
            },
            "ListDocumentsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListDocumentsLambdaVersionjRb4FxGGq9rJ2UbYiV00mjKd64rJzYcefJjQXoa4"
              },
              "Export": {
                "Name": "sls-creze-docs-api-dev-ListDocumentsLambdaFunctionQualifiedArn"
              }
            },
            "SignInLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SignInLambdaVersionnbCje03q8veuLqFITY1FcaD1M5zhaIfLF4p26MySlE4"
              },
              "Export": {
                "Name": "sls-creze-docs-api-dev-SignInLambdaFunctionQualifiedArn"
              }
            },
            "SignUpLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SignUpLambdaVersion84r87vDyhZG6c7AEplD3A53V5Vf38SMvwCmjpnOkp4"
              },
              "Export": {
                "Name": "sls-creze-docs-api-dev-SignUpLambdaFunctionQualifiedArn"
              }
            },
            "ConfirmSignUpLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ConfirmSignUpLambdaVersiono67BqsmRXjWOER9zAbLpkwRYPg1S8HqSA4tiKROCk"
              },
              "Export": {
                "Name": "sls-creze-docs-api-dev-ConfirmSignUpLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-creze-docs-api-dev-ServiceEndpoint"
              }
            },
            "BucketName": {
              "Description": "Name of the S3 bucket to hold file uploads",
              "Value": "creze-docs-api-dev-bucket"
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "resources": {
        "Resources": {
          "DocumentsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "creze-docs-api-dev-bucket",
              "AccessControl": "Private",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "LambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/creze-docs-api-dev",
              "RetentionInDays": 14
            }
          },
          "ErrorAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Alarm if function errors",
              "Namespace": "AWS/Lambda",
              "MetricName": "Errors",
              "Dimensions": [
                {
                  "Name": "FunctionName",
                  "Value": {
                    "Ref": "AWS::StackName"
                  }
                }
              ],
              "Statistic": "Sum",
              "Period": 300,
              "EvaluationPeriods": 1,
              "Threshold": 1,
              "ComparisonOperator": "GreaterThanOrEqualToThreshold",
              "AlarmActions": [
                "arn:aws:sns:us-east-2:764961882162:my-sns-topic"
              ],
              "TreatMissingData": "notBreaching"
            }
          },
          "ApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "Name": "CognitoUserPoolAuthorizer",
              "Type": "COGNITO_USER_POOLS",
              "IdentitySource": "method.request.header.Authorization",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ProviderARNs": [
                "arn:aws:cognito-idp:us-east-2:764961882162:userpool/us-east-2_Dk6dCg56D"
              ]
            }
          }
        },
        "Outputs": {
          "BucketName": {
            "Description": "Name of the S3 bucket to hold file uploads",
            "Value": "creze-docs-api-dev-bucket"
          }
        }
      },
      "functions": {
        "hello": {
          "handler": "src/infrastructure/api/hello.lambda_handler",
          "events": [
            {
              "http": {
                "path": "hello",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "creze-docs-api-dev-hello",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "HelloLambdaVersioniie3uIV6f1m9eZKlKDPsQ6fxSQbf0AYhujUws90Gfv0"
        },
        "uploadFragment": {
          "handler": "src/infrastructure/api/upload_fragment.lambda_handler",
          "events": [
            {
              "http": {
                "path": "upload_fragment",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "managedExternally": false,
                  "authorizerId": {
                    "Ref": "ApiGatewayAuthorizer"
                  },
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "creze-docs-api-dev-uploadFragment",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "UploadFragmentLambdaVersionNABKOM6e0oSdRMOk4gkD7tqYzKPok4SXGyF8lx4tEc"
        },
        "reassembleFile": {
          "handler": "src/infrastructure/api/reassemble_file.lambda_handler",
          "events": [
            {
              "http": {
                "path": "reassemble_file",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "managedExternally": false,
                  "authorizerId": {
                    "Ref": "ApiGatewayAuthorizer"
                  },
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "creze-docs-api-dev-reassembleFile",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "ReassembleFileLambdaVersionRNzTDLQgoaJh895GZXBhFaICGWUmulHYJrg86lszLQ"
        },
        "listDocuments": {
          "handler": "src/infrastructure/api/list_files.lambda_handler",
          "events": [
            {
              "http": {
                "path": "list_files",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "managedExternally": false,
                  "authorizerId": {
                    "Ref": "ApiGatewayAuthorizer"
                  },
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "creze-docs-api-dev-listDocuments",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "ListDocumentsLambdaVersionjRb4FxGGq9rJ2UbYiV00mjKd64rJzYcefJjQXoa4"
        },
        "signIn": {
          "handler": "src/infrastructure/api/sign_in.lambda_handler",
          "events": [
            {
              "http": {
                "path": "login",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "creze-docs-api-dev-signIn",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "SignInLambdaVersionnbCje03q8veuLqFITY1FcaD1M5zhaIfLF4p26MySlE4"
        },
        "signUp": {
          "handler": "src/infrastructure/api/sign_up.lambda_handler",
          "events": [
            {
              "http": {
                "path": "register",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "creze-docs-api-dev-signUp",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "SignUpLambdaVersion84r87vDyhZG6c7AEplD3A53V5Vf38SMvwCmjpnOkp4"
        },
        "confirmSignUp": {
          "handler": "src/infrastructure/api/confirm_sign_up.lambda_handler",
          "events": [
            {
              "http": {
                "path": "confirm_register",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "creze-docs-api-dev-confirmSignUp",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "ConfirmSignUpLambdaVersiono67BqsmRXjWOER9zAbLpkwRYPg1S8HqSA4tiKROCk"
        }
      },
      "plugins": [
        "serverless-python-requirements"
      ],
      "custom": {
        "pythonRequirements": {
          "dockerizePip": true,
          "slim": true
        }
      }
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: robertuj\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\napp: creze-docs\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\nservice: creze-docs-api\n\nprovider:\n  name: aws\n  runtime: python3.12\n  stage: dev\n  region: us-east-2\n  environment:\n    BUCKET_NAME: ${self:service}-${self:provider.stage}-bucket\n    COGNITO_USER_POOL_ID: us-east-2_Dk6dCg56D\n    COGNITO_CLIENT_ID: 1n01pklns0cd17licmd7fh6rou\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n        - s3:DeleteObject\n      Resource: \"arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*\"\n    - Effect: \"Allow\"\n      Action:\n        - s3:ListBucket\n      Resource: \"arn:aws:s3:::${self:provider.environment.BUCKET_NAME}\"\n    - Effect: \"Allow\"\n      Action:\n        - \"logs:CreateLogGroup\"\n        - \"logs:CreateLogStream\"\n        - \"logs:PutLogEvents\"\n      Resource: \"arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*\"\n    - Effect: \"Allow\"\n      Action:\n        - \"lambda:InvokeFunction\"\n      Resource:\n        - \"arn:aws:lambda:${self:provider.region}:764961882162:function:creze-docs-api-dev-reassembleFile\"\n  apiGateway:\n    binaryMediaTypes:\n      - 'application/octet-stream'\n      - 'multipart/form-data'\n\nresources:\n  Resources:\n    # Resource S3 bucket to store file uploads\n    DocumentsBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.BUCKET_NAME}\n        AccessControl: Private\n        CorsConfiguration:\n          CorsRules:\n            - AllowedOrigins:\n                - \"*\"\n              AllowedHeaders:\n                - \"*\"\n              AllowedMethods:\n                - GET\n                - PUT\n                - POST\n                - DELETE\n              MaxAge: 3000\n    # Resource to create a log group for each lambda function\n    LambdaLogGroup:\n      Type: AWS::Logs::LogGroup\n      Properties:\n        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}\n        RetentionInDays: 14\n    # Resource to create an alarm if the function errors\n    ErrorAlarm:\n      Type: AWS::CloudWatch::Alarm\n      Properties:\n        AlarmDescription: \"Alarm if function errors\"\n        Namespace: \"AWS/Lambda\"\n        MetricName: \"Errors\"\n        Dimensions:\n          - Name: \"FunctionName\"\n            Value: { \"Ref\": \"AWS::StackName\" }\n        Statistic: \"Sum\"\n        Period: 300\n        EvaluationPeriods: 1\n        Threshold: 1\n        ComparisonOperator: \"GreaterThanOrEqualToThreshold\"\n        AlarmActions:\n          - \"arn:aws:sns:${self:provider.region}:764961882162:my-sns-topic\"\n        TreatMissingData: \"notBreaching\"\n    # Authorizer for Cognito\n    ApiGatewayAuthorizer:\n      Type: AWS::ApiGateway::Authorizer\n      Properties:\n        Name: CognitoUserPoolAuthorizer\n        Type: \"COGNITO_USER_POOLS\"\n        IdentitySource: method.request.header.Authorization\n        RestApiId:\n          Ref: ApiGatewayRestApi\n        ProviderARNs:\n          - \"arn:aws:cognito-idp:${self:provider.region}:764961882162:userpool/${self:provider.environment.COGNITO_USER_POOL_ID}\"\n\n  Outputs:\n    BucketName:\n      Description: \"Name of the S3 bucket to hold file uploads\"\n      Value: ${self:provider.environment.BUCKET_NAME}\n\n\nfunctions:\n  # Function to use as endpoint for API Gateway\n  hello:\n    handler: src/infrastructure/api/hello.lambda_handler\n    events:\n      - http:\n          path: /hello\n          method: get\n  #  Function to upload a file to S3\n  uploadFragment:\n    handler: src/infrastructure/api/upload_fragment.lambda_handler\n    events:\n      - http:\n          path: /upload_fragment\n          method: post\n          cors: true\n          authorizer:\n              type: COGNITO_USER_POOLS\n              authorizerId:\n                Ref: ApiGatewayAuthorizer\n\n  #  Function to reassemble a file from S3\n  reassembleFile:\n    handler: src/infrastructure/api/reassemble_file.lambda_handler\n    events:\n      - http:\n          path: /reassemble_file\n          method: post\n          cors: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n\n #  Function to list all files in S3\n  listDocuments:\n    handler: src/infrastructure/api/list_files.lambda_handler\n    events:\n      - http:\n          path: /list_files\n          method: get\n          cors: true\n          authorizer:\n            type: COGNITO_USER_POOLS\n            authorizerId:\n              Ref: ApiGatewayAuthorizer\n  #  Sign in function with cognito\n  signIn:\n      handler: src/infrastructure/api/sign_in.lambda_handler\n      events:\n      - http:\n          path: /login\n          method: post\n          cors: true\n  # Sign up function with cognito\n  signUp:\n      handler: src/infrastructure/api/sign_up.lambda_handler\n      events:\n      - http:\n          path: /register\n          method: post\n          cors: true\n  # Confirm sign up function with cognito\n  confirmSignUp:\n      handler: src/infrastructure/api/confirm_sign_up.lambda_handler\n      events:\n      - http:\n          path: /confirm_register\n          method: post\n          cors: true\nplugins:\n  - serverless-python-requirements\n\ncustom:\n    pythonRequirements:\n        dockerizePip: true\n        slim: true",
    "command": [
      "deploy"
    ],
    "options": {
      "verbose": true,
      "force": true
    },
    "error": null,
    "params": {},
    "machineId": "62b84d7c5c664c8551015d9c3a270148",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "0a01ac39-af1b-4904-8981-19be7b91fc9a",
    "orgName": "robertuj",
    "userId": "qSCjDwBHcP1knCdjZf",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": true
      },
      "orgObservabilityIntegrations": [
        {
          "integrationId": "95VhisJV5ifgLGbHW5Zod8",
          "awsAccountId": "764961882162",
          "status": "alive"
        }
      ],
      "serviceAppId": "rVSJGyNsMt49xpxL9H",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "robertuj",
    "subscription": null,
    "userEmail": "robertuj@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "764961882162",
    "projectType": "framework",
    "versionSf": "4.2.4",
    "serviceProviderAwsCfStackName": "creze-docs-api-dev",
    "integrations": {},
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-2:764961882162:stack/creze-docs-api-dev/216d0a10-6583-11ef-9f31-02c99710026b",
    "serviceProviderAwsCfStackCreated": "2024-08-28T21:18:54.811Z",
    "serviceProviderAwsCfStackUpdated": "2024-08-29T14:29:24.876Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ReassembleFileLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-reassembleFile:68",
        "Description": "Current Lambda function version",
        "ExportName": "sls-creze-docs-api-dev-ReassembleFileLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SignInLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-signIn:61",
        "Description": "Current Lambda function version",
        "ExportName": "sls-creze-docs-api-dev-SignInLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ConfirmSignUpLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-confirmSignUp:55",
        "Description": "Current Lambda function version",
        "ExportName": "sls-creze-docs-api-dev-ConfirmSignUpLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "BucketName",
        "OutputValue": "creze-docs-api-dev-bucket",
        "Description": "Name of the S3 bucket to hold file uploads"
      },
      {
        "OutputKey": "ListDocumentsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-listDocuments:68",
        "Description": "Current Lambda function version",
        "ExportName": "sls-creze-docs-api-dev-ListDocumentsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UploadFragmentLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-uploadFragment:68",
        "Description": "Current Lambda function version",
        "ExportName": "sls-creze-docs-api-dev-UploadFragmentLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SignUpLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-signUp:61",
        "Description": "Current Lambda function version",
        "ExportName": "sls-creze-docs-api-dev-SignUpLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HelloLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-2:764961882162:function:creze-docs-api-dev-hello:68",
        "Description": "Current Lambda function version",
        "ExportName": "sls-creze-docs-api-dev-HelloLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://gg8jpcjhhe.execute-api.us-east-2.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-creze-docs-api-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "creze-docs-api-dev-serverlessdeploymentbucket-9woo1qqdmukj",
        "ExportName": "sls-creze-docs-api-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}